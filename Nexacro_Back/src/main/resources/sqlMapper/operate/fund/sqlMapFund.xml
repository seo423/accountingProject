<?xml version="1.0" encoding="UTF-8"?><!--Generated at: THU DEC 14 09:48:32 KST 2023-->
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="kr.co.seoulit.erp.account.operate.fund.dao.FundDAO">

    <resultMap id="DailyTradeStatusResult" type="kr.co.seoulit.erp.account.operate.fund.to.DailyTradeStatusBean">
        <result property="accountName" column="ACCOUNT_NAME"/>
        <result property="previousBalance" column="PREVIOUS_BALANCE"/>
        <result property="dayIncrease" column="DAY_INCREASE"/>
        <result property="dayDecrease" column="DAY_DECREASE"/>
        <result property="dayBalance" column="DAY_BALANCE"/>
    </resultMap>

    <parameterMap id="getDailyTradeStatusParam" type="map">
        <parameter property="selectDate" jdbcType="VARCHAR" javaType="java.lang.String" mode="IN"/>
        <parameter property="ERROR_CODE" jdbcType="DECIMAL" javaType="java.lang.Integer" mode="OUT"/>
        <parameter property="ERROR_MSG" jdbcType="VARCHAR" javaType="java.lang.String" mode="OUT"/>
        <parameter property="RESULT" jdbcType="CURSOR" javaType="java.sql.ResultSet" mode="OUT" resultMap="DailyTradeStatusResult" />
    </parameterMap>

    <resultMap id="OutExpectedPriceResult" type="kr.co.seoulit.erp.account.operate.fund.to.OutBean">
        <result property="accountName" column="ACCOUNT_NAME"/>
        <result property="expenseReport" column="EXPENSE_REPORT"/>
        <result property="price" column="PRICE"/>
    </resultMap>

    <resultMap id="InExpectedPriceResult" type="kr.co.seoulit.erp.account.operate.fund.to.InBean">
        <result property="accountName" column="ACCOUNT_NAME"/>
        <result property="expenseReport" column="EXPENSE_REPORT"/>
        <result property="price" column="PRICE"/>
    </resultMap>

    <resultMap id="financeStatusResult" type="kr.co.seoulit.erp.account.operate.fund.to.FinanceBean">
        <result property="customerCode" column="CUSTOMER_CODE"/>
        <result property="customerName" column="CUSTOMER_NAME"/>
        <result property="accountNo" column="ACCOUNT_NO"/>
        <result property="previousBalance" column="PREVIOUS_BALANCE"/>
        <result property="increase" column="INCREASE"/>
        <result property="decrease" column="DECREASE"/>
        <result property="dayBalance" column="DAY_BALANCE"/>
        <result property="limitBalance" column="LIMIT_BALANCE"/>
    </resultMap>

    <parameterMap id="getFinanceStatusParam" type="map">
        <parameter property="selectDate" jdbcType="VARCHAR" javaType="java.lang.String" mode="IN"/>
        <parameter property="selectAccount" jdbcType="VARCHAR" javaType="java.lang.String" mode="IN"/>
        <parameter property="ERROR_CODE" jdbcType="DECIMAL" javaType="java.lang.Integer" mode="OUT"/>
        <parameter property="ERROR_MSG" jdbcType="VARCHAR" javaType="java.lang.String" mode="OUT"/>
        <parameter property="RESULT" jdbcType="CURSOR" javaType="java.sql.ResultSet" mode="OUT" resultMap="financeStatusResult" />
    </parameterMap>

    <resultMap id="getGeneralFundStatusResult" type="kr.co.seoulit.erp.account.operate.fund.to.GeneralFundBean">
        <result property="indexNo" column="INDEX_NO"/>
        <result property="accountName" column="ACCOUNT_NAME"/>
        <result property="customerName" column="CUSTOMER_NAME"/>
        <result property="previousBalance" column="PREVIOUS_BALANCE"/>
        <result property="dayInout" column="DAY_INOUT"/>
        <result property="dayBalance" column="DAY_BALANCE"/>
    </resultMap>

    <!-- 일일거래증감현황 조회 -->
    <select id="findDailyTradeStatus" parameterMap="getDailyTradeStatusParam" statementType="CALLABLE">
   <![CDATA[
        {call P_DAILY_TRADE_STATUS(?, ?, ?, ?)}
        ]]>
   </select>

    <!-- 출금예정액 조회 -->
    <select id="findOutExpectedPrice" parameterType="map" resultMap="OutExpectedPriceResult">
   <![CDATA[
        SELECT *
        FROM (
                 SELECT CAST(A.ACCOUNT_NAME AS VARCHAR2(50)) AS ACCOUNT_NAME
                      , CAST(S.EXPENSE_REPORT AS VARCHAR2(50)) AS EXPENSE_REPORT
                      , TO_CHAR(J.RIGHT_CREDITS_PRICE, 'FM999,999,999,999') AS PRICE
                 FROM SLIP S
                    , JOURNAL J
                    , ACCOUNT A
                 WHERE S.SLIP_NO = J.SLIP_NO
                   AND J.ACCOUNT_INNER_CODE = A.ACCOUNT_CODE
                   AND S.REPORTING_DATE = #{selectDate}
                   AND J.BALANCE_DIVISION = #{balanceDivision}
                 ORDER BY A.ACCOUNT_NAME)
        UNION ALL
        SELECT '[합 계]' AS ACCOUNT_NAME
             , NULL AS EXPENSE_REPORT
             , A.PRICE AS PRICE
        FROM (
                 SELECT TO_CHAR(SUM(J.RIGHT_CREDITS_PRICE), 'FM999,999,999,999') AS PRICE
                 FROM SLIP S
                    , JOURNAL J
                    , ACCOUNT A
                 WHERE S.SLIP_NO = J.SLIP_NO
                   AND J.ACCOUNT_INNER_CODE = A.ACCOUNT_CODE
                   AND S.REPORTING_DATE = #{selectDate}
                   AND J.BALANCE_DIVISION = #{balanceDivision}
                 GROUP BY J.BALANCE_DIVISION) A
        ]]>
   </select>

    <!-- 입금예정액 조회 -->
    <select id="findInExpectedPrice" parameterType="map" resultMap="InExpectedPriceResult">
   <![CDATA[
        SELECT *
        FROM (
                 SELECT CAST(A.ACCOUNT_NAME AS VARCHAR2(50)) AS ACCOUNT_NAME
                      , CAST(S.EXPENSE_REPORT AS VARCHAR2(50)) AS EXPENSE_REPORT
                      , TO_CHAR(J.LEFT_DEBTOR_PRICE, 'FM999,999,999,999') AS PRICE
                 FROM SLIP S
                    , JOURNAL J
                    , ACCOUNT A
                 WHERE S.SLIP_NO = J.SLIP_NO
                   AND J.ACCOUNT_INNER_CODE = A.ACCOUNT_CODE
                   AND S.REPORTING_DATE = #{selectDate}
                   AND J.BALANCE_DIVISION = #{balanceDivision}
                 ORDER BY A.ACCOUNT_NAME)
        UNION ALL
        SELECT '[합 계]' AS ACCOUNT_NAME
             , NULL AS EXPENSE_REPORT
             , A.PRICE AS PRICE
        FROM (
                 SELECT TO_CHAR(SUM(J.LEFT_DEBTOR_PRICE), 'FM999,999,999,999') AS PRICE
                 FROM SLIP S
                    , JOURNAL J
                    , ACCOUNT A
                 WHERE S.SLIP_NO = J.SLIP_NO
                   AND J.ACCOUNT_INNER_CODE = A.ACCOUNT_CODE
                   AND S.REPORTING_DATE = #{selectDate}
                   AND J.BALANCE_DIVISION = #{balanceDivision}
                 GROUP BY J.BALANCE_DIVISION) A
        ]]>
   </select>

    <!-- 예적금현황 조회 -->
    <select id="findFinanceStatus" parameterMap="getFinanceStatusParam" statementType="CALLABLE">
   <![CDATA[
        {call P_FINANCE_STATUS(?, ?, ?, ?, ?)}
        ]]>
   </select>

    <!-- 총괄거래현황 조회 -->
    <select id="findGeneralFundStatus" parameterType="map" resultMap="getGeneralFundStatusResult">
   <![CDATA[
        SELECT ROWNUM AS INDEX_NO
             , TO_CHAR(A.ACCOUNT_NAME) AS ACCOUNT_NAME
             , A.CUSTOMER_NAME AS CUSTOMER_NAME
             , A.PREVIOUS_BALANCE AS PREVIOUS_BALANCE
             , A.DAY_INOUT AS DAY_INOUT
             , A.DAY_BALANCE AS DAY_BALANCE
        FROM (
                 SELECT A1.ACCOUNT_NAME AS ACCOUNT_NAME
                      , C1.CUSTOMER_NAME AS CUSTOMER_NAME
                      , NULL AS PREVIOUS_BALANCE
                      , CASE WHEN SUM(J1.LEFT_DEBTOR_PRICE) - SUM(J1.RIGHT_CREDITS_PRICE) = 0
                                 THEN NULL
                             ELSE TO_CHAR(SUM(J1.LEFT_DEBTOR_PRICE) - SUM(J1.RIGHT_CREDITS_PRICE), 'FM999,999,999,999') END AS DAY_INOUT
                      , CASE WHEN SUM(J1.LEFT_DEBTOR_PRICE) - SUM(J1.RIGHT_CREDITS_PRICE) = 0
                                 THEN NULL
                             ELSE TO_CHAR(SUM(J1.LEFT_DEBTOR_PRICE) - SUM(J1.RIGHT_CREDITS_PRICE), 'FM999,999,999,999') END AS DAY_BALANCE
                 FROM SLIP S1
                    , JOURNAL J1
                    , CUSTOMER C1
                    , ACCOUNT A1
                 WHERE S1.SLIP_NO = J1.SLIP_NO
                   AND J1.ACCOUNT_INNER_CODE = A1.ACCOUNT_CODE
                   AND J1.CUSTOMER_CODE = C1.CUSTOMER_CODE
                   AND A1.ACCOUNT_NAME IN ('단기차입금', '장기차입금', '정기예금', '정기적금')
                   AND S1.REPORTING_DATE BETWEEN #{startDate} AND #{endDate}
                 GROUP BY A1.ACCOUNT_NAME, C1.CUSTOMER_NAME
                 ORDER BY A1.ACCOUNT_NAME, C1.CUSTOMER_NAME
             ) A
        UNION ALL
        SELECT NULL AS INDEX_NO
             , '[합 계]' AS ACCOUNT_NAME
             , NULL AS CUSTOMER_NAME
             , CASE WHEN T.PREVIOUS_BALANCE = 0
                        THEN NULL
                    ELSE TO_CHAR(T.PREVIOUS_BALANCE, 'FM999,999,999,999') END AS PREVIOUS_BALANCE
             , CASE WHEN C.DAY_BALANCE = 0
                        THEN NULL
                    ELSE TO_CHAR(C.DAY_BALANCE, 'FM999,999,999,999') END AS DAY_INOUT
             , CASE WHEN NVL(T.PREVIOUS_BALANCE,0) + NVL(C.DAY_BALANCE, 0) = 0
                        THEN NULL
                    ELSE TO_CHAR(NVL(T.PREVIOUS_BALANCE,0) + NVL(C.DAY_BALANCE, 0), 'FM999,999,999,999') END AS DAY_BALANCE
        FROM (
                 SELECT SUM(J2.LEFT_DEBTOR_PRICE) - SUM(J2.RIGHT_CREDITS_PRICE) AS PREVIOUS_BALANCE
                 FROM SLIP S2
                    , JOURNAL J2
                    , ACCOUNT A2
                 WHERE S2.SLIP_NO = J2.SLIP_NO
                   AND J2.ACCOUNT_INNER_CODE = A2.ACCOUNT_CODE
                   AND A2.ACCOUNT_NAME IN ('단기차입금', '장기차입금', '정기예금', '정기적금')
                   AND S2.REPORTING_DATE BETWEEN '2020-01-01' AND TO_CHAR(TO_DATE(#{startDate}, 'YYYY-MM-DD')-1, 'YYYY-MM-DD')
             ) T,
             (
                 SELECT SUM(J.LEFT_DEBTOR_PRICE) - SUM(J.RIGHT_CREDITS_PRICE) AS DAY_BALANCE
                 FROM SLIP S
                    , JOURNAL J
                    , CUSTOMER C
                    , ACCOUNT A
                 WHERE S.SLIP_NO = J.SLIP_NO
                   AND J.ACCOUNT_INNER_CODE = A.ACCOUNT_CODE
                   AND J.CUSTOMER_CODE = C.CUSTOMER_CODE
                   AND A.ACCOUNT_NAME IN ('단기차입금', '장기차입금', '정기예금', '정기적금')
                   AND S.REPORTING_DATE BETWEEN #{startDate} AND #{endDate}
             ) C
        ]]>
   </select>


</mapper>